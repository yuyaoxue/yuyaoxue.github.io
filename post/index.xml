<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 薛玉瑶的博客</title>
    <link>https://www.xueyuyao.com/post/</link>
    <description>Recent content in Posts on 薛玉瑶的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright notice</copyright>
    <lastBuildDate>Thu, 27 Sep 2018 23:30:24 +0800</lastBuildDate>
    
	<atom:link href="https://www.xueyuyao.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unity 2017 Game Optimization 脑图</title>
      <link>https://www.xueyuyao.com/2018/09/27/2018-09-27-unity-2017-game-optimization/</link>
      <pubDate>Thu, 27 Sep 2018 23:30:24 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/09/27/2018-09-27-unity-2017-game-optimization/</guid>
      <description>前言 最近一直在看一本有关 Unity 优化的书。书里面对于 Unity 优化点讲的很详细，我就以脑图的形式整理一下优化点。
结束 目前只整理出了三章的内容，之后会逐步更新其他的章节的内容。</description>
    </item>
    
    <item>
      <title>使用 hugo&#43;github pages 搭建个人博客</title>
      <link>https://www.xueyuyao.com/2018/09/27/2018-09-27-hugo_buildblog_summarize/</link>
      <pubDate>Thu, 27 Sep 2018 14:10:24 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/09/27/2018-09-27-hugo_buildblog_summarize/</guid>
      <description>前言 hugo 是基于 Go 语言的静态网站生成器，前几天将自己的博客迁移到 hugo 上，记录下过程。
搭建环境 OS：Windows 10
git：安装 Git;
hugo：hugo_0.48_Windows-64bit;
安装 Hugo 从 Hugo 的 GitHub 仓库下载安装。当前最新的是 hugo_0.48_Windows-64bit.zip 这个版本。下载解压后添加到 Windows 的系统环境变量的 PATH 中即可，不需安装。
配置 Hugo 初始化项目 使用 hugo new site xxx 来初始化项目，xxx 是自定义文件名。 以下是我的项目初始化过程
C:\Users\user&amp;gt;hugo new site xueyuyao Congratulations! Your new Hugo site is created in C:\Users\user\xueyuyao. Just a few more steps and you&#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.</description>
    </item>
    
    <item>
      <title>C# 中的访问修饰符和声明修饰符</title>
      <link>https://www.xueyuyao.com/2018/09/20/2018-09-20-class_modifier/</link>
      <pubDate>Thu, 20 Sep 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/09/20/2018-09-20-class_modifier/</guid>
      <description>前言 C# 中的访问修饰符和声明修饰符挺多的，总结一下，做个记录。
访问修饰符 访问修饰符通常作为声明字段数据类型的前缀，它标识了所修饰成员的封装级别。可以选择 5 个访问修饰符，即 public、private、protected、internal和 protected internal。
public 公有的：显式指明可从类的外部访问被它修饰的字段。
private 私有的：只有在声明它们的类和结构中才可以访问。如果不为类成员添加修饰符，那么默认使用的是 private。成员默认为私有成员，公共成员必须显式指定。
protected 受保护的：可在基类中定义只有派生类才能访问的成员。
internal 内部的，同一个程序集中的所有类都可以访问。
protected internal 访问级别为 internal 或 protected。即，“同一个程序集中的所有类，以及所有程序集中的子类都可以访问。
声明修饰符 目前了解的声明修饰符有 8 个，即 partial、static、abstract、Sealed、Virtual、Override、New、Extern。
Partial 在整个同一程序集中定义分部类和结构。
Static 声明属于类型本身而不是属于特定对象的成员。
Abstract 抽象类不可实例化，只能是其他类的基类。类中的方法只声明不实现，方法的实现在他的派生类中完成。其作用是强制所有派生类提供实现。
Sealed 对类使用 sealed 修饰符可以禁止从该类继承。
Virtual 用于修饰方法、属性、索引器或事件声明，并且允许在派生类中重写这些对象。
规则：虚方法只提供默认实现，这种实现可由派生类完全重写；“运行时”遇到虚方法时，他会调用虚成员派生得最远的，重写的实现。
Override 提供从基类继承的成员的新实现。
New 作为修饰符，在基类面前隐藏了派生类重新声明的成员，在不使用 new 修饰符的情况下隐藏成员是允许的，但会生成警告。作为运算符，用于创建对象和调用构造函数。
Extern 用于声明在外部实现的方法。 extern 修饰符的常见用法是在使用 Interop 服务调入非托管代码时与 DllImport 特性一起使用。 在这种情况下，还必须将方法声明为 static。</description>
    </item>
    
    <item>
      <title>浅谈协程</title>
      <link>https://www.xueyuyao.com/2018/09/09/2018-09-09-coroutine/</link>
      <pubDate>Sun, 09 Sep 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/09/09/2018-09-09-coroutine/</guid>
      <description>前言 在 Unity 中，对协程的使用度非常高；面试的时候，也多数会被问到。自己都没有系统的整理下协程相关的知识。借此机会，梳理下自己对协程理解，以便更好的理解协程。
什么是协程？ 协程（Coroutines）通过字面意思是协助程序。
 A coroutine is like a function that has the ability to pause execution and return control to Unity but then to continue where it left off on the following frame。  这是 Unity 官网文档 中对协程的解释.
协程的原理 协程是一个部分执行，遇到条件（yield return）会挂起，知道条件满足才会被唤醒继续执行后面代码的一种函数。 Unity 在每一帧（Frame）都会去处理对象上的协程。Unity 主要是在 Update 后去处理协程（检查协程的条件是否满足）  Coroutines 不是多线程，不是异步技术，协程都在 MainThread 中执行，而且每个时刻只有一个 Coroutine 在执行。 Coroutine 是一个 function，可以部分执行，当条件满足时，未来会被再次执行直到整个函数执行完毕。
协程在 unity 脚本执行顺序的位置 测试 根据协程的原理和协程在 Unity momo 脚本执行顺序做一个小测试来验证其原理。
public class Test : MonoBehaviour { void Start () { Debug.</description>
    </item>
    
    <item>
      <title>工作自我反省</title>
      <link>https://www.xueyuyao.com/2018/08/12/2018-08-12-selfreflectionatwork/</link>
      <pubDate>Sun, 12 Aug 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/08/12/2018-08-12-selfreflectionatwork/</guid>
      <description>前言 前段时间看了一本有关程序员的职业素养的书《代码整洁之道 程序员的职业素养》。在这本书里，作者重新定义了专业程序员，要想成为真正专业的程序员，需要什么样的态度、原则、行动；这些态度、原则、行动都源于作者一路走来的亲身体会。可以把这本书当成一份指引，靠它绕开一些弯路，提高自己的职业素养。
本来想要总结程序员的职业素养，作者写的观点简洁明了，苦思良久，实在总结不出啥了。索性总结一下我这段时间工作上的犯过的错误以自省。
打包 面对自己不知道怎么办的时候，想别人请教。
对于打包这件事，面对自己不知道怎么打包，想当然的试着打一下包。殊不知，自己在公共打包环境，试着打包，有可能会对其他人测试环境，造成多大的影响。从而增加修复的工作量。在工作中，要保持严谨的工作态度，不能儿戏。明确自己工作中的每次操作，尤其是跟他人合作，或者在公共的环境下。自己做的每一步操作，都要清楚自己在做什么；
分支合并时，时刻保持清醒 保持清醒，清楚自己的每一步操作，在关键时刻尤为重要。
到项目的后期之后，不同分支（提审分支，稳定分支）在分支合并的时候，一定要清楚该做什么，不该做什么；一定要清楚自己哪些提交是需要cherry-pick 到稳定分支。
ps：（项目规定 merge 操作是单方向的，即：在 master 分支 merge 过 feature 分支之后，就不能再在该 feature 分支 merge master 分支）。
做任何操作都要清楚自己在做什么 在操作命令行的时候，首先明确自己的需求，再者要清楚每一步操作意义；不能抱着试试的想法，有一些操作可能是不可逆的，而自己不清楚，从而会造成不可预知的错误。
对自己的工作负责 接到新任务后，无论是不是新的一项任务，还是功能优化，都要对这项任务进行全面的了解：策划文档，与负责人沟通并确认需求，任务需要的测试环境，测试周期等等。</description>
    </item>
    
    <item>
      <title>有关于 .prefab 与自身挂载组件的关系</title>
      <link>https://www.xueyuyao.com/2018/08/05/2018-08-05-aboutprefab/</link>
      <pubDate>Sun, 05 Aug 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/08/05/2018-08-05-aboutprefab/</guid>
      <description>问题 在 UI Panel 添加了一个粒子特效，打开该 Panel 时，特效不显示，选中特效时，特效又会显示出来。
测试 同事提醒可能跟特效的父级的 Scale 有关系。经过测试，确实跟 Canvas 的 Scale 有关系。因为我们项目 UI 框架设计的原因，将 UIPanel 制作成 prefab 时，将 UIPanel 的 Active 设置为 false；在 UIPanel 在加载成功时，Canvas 的 Scale 为 0，设置 UIPanel.SetActive(true) 之后，Canvas 的 Scale 为 1。
测试 Canvas 的 Scale 为 0 的原因 经过测试，Canvas 的 Scale 为 0 的原因跟 Canvas 的 Render Mode 有关系：
Canvas 的 Render Mode 设置不同，对于 RectTransform 组件上的值是有影响的。
当 Renderer Mode 为 Screen Space - Camera 或 Screen Space -Overlay 时 Canvas 的 Scale 会为 0 ，如果为 World Space 时，Scale 就会变为 1。</description>
    </item>
    
    <item>
      <title>提问的智慧-阅读笔记</title>
      <link>https://www.xueyuyao.com/2018/07/30/2018-07-30-how-to-ask-questions-the-smart-way-note/</link>
      <pubDate>Mon, 30 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/07/30/2018-07-30-how-to-ask-questions-the-smart-way-note/</guid>
      <description>前言 向其他人提问问题是很常见的事情，尤其从事计算机方面的工作，所以拥有提问的智慧尤为重要。提问的智慧这篇文章里面的提问环境是在技术论坛上或者邮件的形式。看完这篇文章之后，结合着自身的情况，写一些总结。
提问之前 1.在工作中遇到项目功能设计上的疑问，先去翻阅相关策划方案；如果还有疑问，把问题总结好再去跟相关人员提疑问。
2.如果遇到技术上的问题；
首先，尝试自己解决问题：
1-&amp;gt;自己检查或者试验找到答案；
2-&amp;gt;去查阅相关文档或者 API；
3-&amp;gt;尝试上网搜索以找到答案；
4-&amp;gt; 尝试阅读源代码以找到答案；
如果做了上述的努力，还是没有找到合适的解决方案，就需要想身边的高手提问题。
提问题时 给别人描述问题的时候，使用清晰，正确，精准并语法正确的语句；也就是仔细，清楚地描述你的问题或 Bug 的症状。不要说一堆话，没有重点，既没有把问题描述清楚，也浪费了别人的时间。
未完待续 &amp;hellip;</description>
    </item>
    
    <item>
      <title>有关 git rebase 错误使用引发的问题</title>
      <link>https://www.xueyuyao.com/2018/07/29/2018-07-29-incorrect_use_of_gitrebase/</link>
      <pubDate>Sun, 29 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/07/29/2018-07-29-incorrect_use_of_gitrebase/</guid>
      <description>前言 本文是前几天我在工作中使用 git 指令合并分支的时候出现了问题，而当时采取了直接 “跳过问题” 的解决方案，导致了文件显示不出来了。所以写一份报告总结记录下。
错误 在 master 分支上跟其他分支进行 merge 时，二进制文件出现冲突。后续使用解决冲突的方式不对，导致二进制文件（.png 图片）显示不出来。
表面原因 出现错误的原因是：在出现冲突时，我先错误的使用了 “他人分支”，出现错误 “无法更新一个或多个文件，请确保没有其他的应用正在锁定你的文件” 时，后使用 “标记为已解决”。后来冲突文件消失了，我当时以为问题真的被解决了。
根本原因 在我的分支上跟 master merge 过，后来提交过几次之后，又进行了 rebase 操作重写历史提交信息后没有成功修改我的提交信息，后来我又通过 &amp;ndash;soft 操作把我分支上的所有的提交都 reset 了，最后合并成一个提交。
执行 rebase 之后，跟 master merge 之后的文件的提交信息都丢失了，而这些文件在 master 分支上又被其他人修改过。导致我在回到 master 分支之后再跟我的分支 merge ，那些丢失提交信息的文件，就会出现冲突。
rebase 会将合并提交变为普通提交，丢失父节点信息。  使用 “他人分支” 或使用 “我的分支” 解决冲突失败是因为找不到文件的版本号
 $ git checkout --theirs /e/Unity_new/client/Assets/Textures/Sprites/Quality/Content/CarQuality_D.png error: path &#39;Assets/Textures/Sprites/Quality/Content/CarQuality_D.png&#39; does not have their version  思考 对于这一问题的处理方式，我犯了几个错误：
1.对于解决冲突的方式：“他人解决”，“我的解决”，“标记为已解决”，这几个操作所表示的意义不够深刻，导致做出了错误的操作。
2.在 master 分支上进行分支 merge 时候，出现冲突文件错误信息，没有仔细分析。</description>
    </item>
    
    <item>
      <title>《游戏编程算法与技巧》读书笔记一</title>
      <link>https://www.xueyuyao.com/2018/07/25/2018-07-25-game_programmingnote/</link>
      <pubDate>Wed, 25 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/07/25/2018-07-25-game_programmingnote/</guid>
      <description>前言 前段时间阅读了一本有关游戏编程的书《游戏编程算法与技巧》，书中介绍了大量今天在游戏行业中用到的算法与技术。包括 2D 和 3D 图形学、物理、人工智能、摄像机等多个方面的技术。
知识框架图 这本书的读书笔记，我打算分成几部分，第一次我按着书上的不同的章节，简单的画了一个框架图，看着比较直观，细节上的内容在后续的博客里加上。</description>
    </item>
    
    <item>
      <title>SuperTextMesh MemoryUninstall Bug</title>
      <link>https://www.xueyuyao.com/2018/07/15/2018-07-15-supertextmesh_memory_uninstall/</link>
      <pubDate>Sun, 15 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/07/15/2018-07-15-supertextmesh_memory_uninstall/</guid>
      <description>前言 前一段时间将 SuperTextMesh 导入到项目中，实现图文混排。最近使用 SuperTextMesh 来实现炫酷的文字特效。在使用过程中，发现了 SuperTextMesh 内存卸载的 Bug。从查找问题到解决断断续续花了有一周的时间，现在问题解决了，写一个总结记录下。
问题描述 项目中，在游戏界面上有使用 SuperTextMesh 来实现文字特效，在网络断开的时候文字会突然消失。经过调试，发现了网络断开的时候，代码在调用了 Resources.UnloadUnusedAssets() ，之后 SuperTextMesh 的文字就消失了。测试将那行代码注释掉，文字就不消失了。于是就沿着这个方向开始查找。
问题复现 为了验证 Bug 确实是资源卸载引起的，重新创建了一个全新的项目，将插件导入空项目中。
运行环境 SuperTextMesh：1.7.1
OS：Windows 10，64 位操作系统，基于 x64 的处理器
Unity：Unity 2017.4.2f2 (64-bit)
Visual Studio：2017
复现操作 在场景中，创建 SuperTextMesh，Button；给 Button 添加点击事件，事件里调用 Resources.UnloadUnusedAssets()。开始运行，文字显示；点击按钮 Button， 文字消失。
找出原因 猜想一 当时还未锁定是资源卸载的问题的时候，排查方向是文字的参数发生了变化。
之前美术同事在做特效的时候，也出现过类似的问题，也会消失；然后选中该特效又能显示出来。后来找出的问题是：在过程中，有父集的 Scale 为 0 导致没有显示。所不同的是，我的一开始是显示的，只是后面消失了。
我根据同事的解决办法去检测下，SuperTextMesh 消失后他的 Scale 的情况，一并检测了其他会影响消失的参数，都没有找到问题所在，所以排除这个猜想。
之后的猜想都是关于资源卸载后，将使用中的 Text 里面的资源卸载掉的原因。
猜想二 Resources.UnloadUnusedAssets()；会卸载掉不被引用的 assets，查代码找到 SuperTextmMeshData 的一个引用是通过 Resources.Load() 加载资源赋值的，后来看到 data 是一个私有静态成员变量，Resources.UnloadUnusedAssets() 不可能会卸载掉他（静态成员变量的引用一直会在）。
猜想三 问题出现的时候，在 FrameDebug 中 UGUI.</description>
    </item>
    
    <item>
      <title>Unity Compilation Bug</title>
      <link>https://www.xueyuyao.com/2018/07/08/2018-07-08-unity_mompilation_bug/</link>
      <pubDate>Sun, 08 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/07/08/2018-07-08-unity_mompilation_bug/</guid>
      <description>前言 前几天在工作中，遇到一个有关 Unity 编译失效的问题，我修改的脚本保存后，Unity 自动编译后，编译失效。
问题描述 我在 VS 里修改了代码保存之后，回到 Unity 里，Unity 自动编译，编译完成之后，还是我修改代码之前的情况（我修改的文件没有被编译）。
问题复现 比如：我修改并了脚本 A，回到 Unity，Unity 自动编译，在编译期间修改并保存了脚本 B。编译完成之后，脚本 B 修改的部分极有可能没有被编译。
找出原因 1.检查了 Unity 的自动编译开关 Edit-&amp;gt;Unity Preferences-&amp;gt;General-&amp;gt;Auto Refresh; 排查了 Unity 的设置问题 2.后来问了同事之后才了解的，这个问题 Unity 标记最后编译时间机制有关系。对于 Unity 而言，VS 只是一个编辑脚本工具，所有的编译工作都在 Unity 这边执行。Unity 不会记每个文件的编译时间，只会记录一个总的最后的编译时间。比如 Unity 编译开始时间为 t1 编译过程需要 10s，最后的编译时间为 t1+10s，如果在这 10s 内又对脚本做了修改，恰好这个脚本已经被编译过了。那这个脚本不会重新被编译，导致了后面的那次修改没有被编译。
解决办法 如果发生了编译失效问题，可以试试以下方法解决：
1.修改并保存编译失效脚本；
2.关闭并重新打开 Unity，重新修改并保存编译失效脚本。
总结与思考 有两点疑问没有解决： 1.Unity 最后编译时间存储在什么地方？ 2.各个文件的编译时间存储在什么地方？
后续查 Unity 标记编译时间相关的资料没查到。听同事说这是 Unity 编译的一个 Bug，个人解决不了，只能在做的过程中尽量避免。现在我都会尽量避免在 Unity 执行编译的时候修改脚本。</description>
    </item>
    
    <item>
      <title>First Publish FlapyBird</title>
      <link>https://www.xueyuyao.com/2018/07/01/2018-07-01-first_public_flappy_bird/</link>
      <pubDate>Sun, 01 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/07/01/2018-07-01-first_public_flappy_bird/</guid>
      <description>前言 这是我在 GitHub 上发布的第一个游戏作品。确切地说，不能算是一个作品，只能是一个小 Demo。项目中所实现的功能效果，离原版差太多。这也让我明白，要做出好的东西，是需要花费很多精力去做的。
游戏介绍 在《FlappyBird》这款游戏中，玩家只需要用一根手指来操控，点击触摸屏幕，小鸟就会往上飞，不断的点击就会不断的往高处飞。放松手指，则会快速下降。所以玩家要控制小鸟一直向前飞行，然后注意躲避途中高低不平的管子。
项目工程
项目已发布到GitHub Releases：项目地址
制作目的 制作游戏的目的在于锻炼独立做项目的能力。由于工作的安排，有时候自己接触到的功能模块比较单一，这就导致自己涉足的其他方面的机会比较少，所以在工作之余写一些简单的 Demo，FlappyBird 是我前一段时间写的一款 Demo。
流程框架 涉及到知识点总结 遇到的难点 功能难点：
1.最核心的是小鸟的飞行和下落的功能，飞行的不自然，缺少上升下落的角度；
2.使用 JSON 实现本地数据保存和读取来实现排行榜;
3.资源动态管理;
4.png 图片的动态切割
设计难点:
1.游戏框架，目前采用 Manager Of Managers;
2.游戏状态，使用有限状态机管理游戏状态，还未写好。
总结与思考 从项目开始到今天，有三周的时间（工作之外的时间），真正用到项目中总的时间大概就三四天的时间吧，这个项目的也不大，整体难度也不难，做起来感觉很费时间，实现一个小功能，花时间比较多，而且返工的次数很多。
这个项目做下来，自己身上已知的好多问题突显出来了。比如知识的缺乏，缺乏自制力，严重拖延症等。想的太多，做的太少，可能是我最大的问题了。
我接下来要做的是上面列出的难点。之后会不断的完善缺少的功能，不定期的更新 FlappyBird 的项目进度。
反思和记录下来自己问题，努力下一个游戏，项目的完成度和质量高一些。</description>
    </item>
    
    <item>
      <title>Unity API 之 Canvas 与 Camera</title>
      <link>https://www.xueyuyao.com/2018/06/24/2018-06-24-canvas_and_camera/</link>
      <pubDate>Sun, 24 Jun 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/06/24/2018-06-24-canvas_and_camera/</guid>
      <description>前言 最近在做一个 2D 游戏，项目做的差不多了，整理一下自己在制作过程中用到的知识点，这篇写 Canvas 与 Camera 的使用。
Canvas 画布是所有 UI 元素都应该在其中的区域。Canvas 是一个带有画布组件的游戏对象，所有 UI 元素都必须是此类画布的子元素。下面是 Canvas 组件
Canvas 有以下三种渲染模式：
1.Screen Space Camera
此模式画布被放置在指定的摄像机前的距离。UI 元素由这个摄像头呈现，这意味着摄像头的设置会影响 UI 的外观。如果将相机设置为透视，UI 元素将以透视的方式呈现，视角的失真程度可以通过相机的视角来控制。如果屏幕被调整了大小，改变了分辨率，或者相机的截屏改变了，画布也会自动地改变大小以匹配。
tip：如果想在 UI 上显示特效，可以使用此渲染模式
2.Screen Space Overlay
此模式将 UI 元素放置在场景顶部呈现的屏幕上。如果屏幕被调整大小或改变分辨率，画布将自动改变大小以匹配它。
tip：如果想在 UI 上显示特效 ，此模式不适用。
3.World Space
在此模式中，画布将表现为场景中的任何其他对象。画布的大小可以通过它的 Rect 变换来手动设置，UI 元素会基于 3D 布局呈现在场景中的其他对象的前面或后面。这对于注定要成为世界一部分的 UI 是有用的。
UI 适配
Canvas Scaler
对于设置为“Screen Space - Overlay” or “Screen Space - Camera”的画布，可以将画布比例器 UI 比例模式设置为 Constant Pixel Size, Scale With Screen Size, or Constant Physical Size。</description>
    </item>
    
    <item>
      <title>Unity Sprite 与 Image 有什么区别？</title>
      <link>https://www.xueyuyao.com/2018/06/19/2018-06-19-sprite_and_image/</link>
      <pubDate>Tue, 19 Jun 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/06/19/2018-06-19-sprite_and_image/</guid>
      <description>前言 最近在做一个 2D 游戏，用到了 Sprite 与 Image。UI 界面使用 Image ,游戏场景相关制作使用 Sprite。后来跟小伙伴交流的时候，提到了这一点，说到具体原理，我记得是渲染方式不同，Image 的渲染方式是 Canvas Renderer；Sprite 的渲染方式是 Sprite Renderer，至于具体为什么要使用，一知半解。
异同 1.都是使用一个 Sprite 源进行渲染，而 Image 需要位于 Canvas 下才能显示出来。
2.场景中的 Sprite 可以像普通的 3D 游戏物体一样处理，通过 Transform 组件进行移动，旋转等操作；而 Image 则使用 RectTransform 进行布局，以便通过 Canvas 统一管理，RectTransform 可以设置大小，对齐方式等。
3.同一 Canvas 下 不同的 Image 的渲染顺序是根据 Image 在 Hierarchy 的上下顺序渲染的，上面的先被渲染，下面的后被渲染；不同的 Sprite 是根据 Order in Layer 数值的大小渲染的，数值小的先被渲染，数值大的后被渲染。
4.Image 和 Sprite 都可以引用 Material; 都可以通过 Color 修改颜色；如果想对图片进行拉伸，而不影响图片的显示， Sprite 可以通过 DrawMode 修改渲染模式，Image 则是通过 Image Type 修改 Image 的显示方式。</description>
    </item>
    
    <item>
      <title>Unity 文件夹编译顺序</title>
      <link>https://www.xueyuyao.com/2018/06/14/2018-06-14-unity_compilation/</link>
      <pubDate>Thu, 14 Jun 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/06/14/2018-06-14-unity_compilation/</guid>
      <description>Unity 特殊文件夹编辑顺序 前一段时间做图文混排导入了一个插件 Super Text Mesh，把文件夹直接导入到项目根目录下 Assets 文件夹里面，忘记放到 Plugins 文件夹下。之后再转移文件目录的时候，会报一个外部类不存在之类的错误，查了半个小时无果，同事提示我查 Unity 的编译顺序，看完 Unity 相关的官方文档之后恍然大悟，原来跟 Unity 的特殊文件夹的编译顺序有关。
在使用 Unity 创建项目的时候，我们可以根据需求创建相应的文件夹；不过有一些特殊文件夹名称会被 Unity 解释为一个指令，文件夹中的内容会被 Unity 特殊对待，这些文件夹的会影响脚本编译的编译顺序。
Assets
Plugins
SteamingAssets
StandardAseets
Editor
Resources
Editor
default resources
以上是 Unity特殊文件夹名称
有关于这些特殊文件夹名称的相关信息，官网文档Special folder names给出了详细的说明
脚本编译有四个不同的阶段，处于哪个阶段编译由其父目录确定。
编译阶段：
阶段1：编译Standard Assets、Pro Standard Assets、Plugin中的运行时脚本
阶段2：编译Standard Assets、Pro Standard Assets、Plugin中的Editor脚本
阶段3：编译其他不在Editor目录下的脚本
阶段4：编译Editor目录下的脚本
不同的编译顺序对脚本之前的引用很重要。基本规则是 被引用的类一定是在较早的阶段编译的。也就是说，在当前阶段之后编译的任何内容都不能被引用。在当前结算或早起阶段编译的任何内容都是完全可用。
我出现的情况是 我转移到Plugins的文件夹里面有脚本调用 Plugins以外的普通文件夹里的脚本。因为Plugins文件夹的编译顺序比Plugins之外的普通文件夹的编译顺序靠前，所以会报 “xx类未定义，找不到xx类的定义”之类的问题。
解决了我的问题之后，回头想想为什么要放到 Plugins 呢？除了规范文件夹的目录位置，还有什么作用呢？
在网上查了一些信息，大概是说会缩短项目的编译时间。
如果项目当中一些长时间不需要改动的脚本代码放到特殊文件夹里面，这些代码只需要编译一次，这样会缩短项目的编译时间。
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; DLL 分割线 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
程序集 DLL 工作环境：
语言：C#
Unity 版本：2017.</description>
    </item>
    
    <item>
      <title>FlappyBird 制作进度</title>
      <link>https://www.xueyuyao.com/2018/06/09/2018-06-09-flappybird/</link>
      <pubDate>Sat, 09 Jun 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/06/09/2018-06-09-flappybird/</guid>
      <description>FlappyBird 制作进度： 1.创建 GitHub 仓库；
2.安装 Unity2018.1.0b12,创建 Unity 工程，导入项目资源；
3.处理图集；
4.整理整体思路，创建相关文件夹以及目前会涉及到的脚本；
5.根据背景图大小设置 Camera 的相关参数；
6.制作 Bird ,Wall 等预制体以及相关动画；
7.制作 Start、GameOver、Score 等 UI 界面。
FlappyBird 制作进度 6月9号 1.创建游戏状态机，bird的状态机
2.Bird 默认飞行，按键向上飞行
3.Bird 与 Walls、Ground 的碰撞检测
剩余功能：
1.动态加载 Wall、ground、bird。
2.Audio 音效系统
3.完善状态机，将游戏流程串联起来。
4.评分机制
5.游戏模式：简单，复杂，困难
FlappyBird 制作进度 6月11号 1.简易 UIManager
2搭建（Start, Ready,Gameover）界面；
3.Bird 的碰撞检测;
4.Ground Pipe 循环移动;
5.创建 GameMansger 实现游戏循环；
未完成部分:
1.音效管理器；
2.根据选择的不同难度，Pipe 的动态加载；
3.加分机制（加分，本地数据存储）；
4.随机背景颜色；
5.Bird （随机颜色，上升掉落角度调整）;</description>
    </item>
    
    <item>
      <title>正则表达式必知必会读书笔记</title>
      <link>https://www.xueyuyao.com/2018/06/03/2018-06-03-regexnote/</link>
      <pubDate>Sun, 03 Jun 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/06/03/2018-06-03-regexnote/</guid>
      <description>简介 正则表达式是一些用来匹配和处理文本的字符串。正则表达式是用正则表达式语言创建的，没有能够直接安装并运行的程序，是内置与其他语言或软件产品里的迷你语言。几乎所有的语言或工具都支持正则表达式。语法是正则表达式最容易掌握的部分，真正的挑战市学会如何运用那些语法把实际问题分解为一系列正则表达式并最终解决，所以必需通过实践才能真正掌握他们。
例外，正则表达式里区分大小写的，大多数正则表达式里的实现也支持不区分字母大小写的匹配操作。
匹配单个字符 “.” 字符是元字符，可以匹配任意单个字符，确切得说：只能匹配出了换行符以外得任何单个字符。
匹配特殊字符：
“.” 在正则表达式里有特殊含义，如果想要匹配字符本身的话，要在前面加上 “\” 来对他进行转义。 “\” 是元字符，用来对字符进行转义，在正则表达式里，有特殊含义得字符序列总是以 “\” 字符开头
匹配一组字符 左括号 [ 是元字符，它标志着一个字符集合的开始；右括号 ] 是元字符，它标志着一个字符集合的结束。
使用 元字符 [ 和 ] 定义一个字符集合，必须匹配该集合里的字符之一。[ ] 里可以写你要匹配的字符，如：[a],[abcdefg]；也可以匹配字符区间 [0-9]，[A-Z]；也可以取非字符 [^0-9]
连字符：
“-” (连字符) 是一个特殊的元字符，作为元字符只能在 [ 和 ] 之间，在字符集合以外的地方，只是一个普通字符，只能与 “-” 本身相匹配。（因此，在正则表达式里，“-” 字符不需要被转义 “?” 需要做测试）
取非字符：
字符集合通常用来指定一组必需匹配其中之一的字符，但在某些场合，需要反过来做，给出一组不需要得到的字符。即：除了那个字符集和里的字符，其他字符都可以匹配。 使用 “^” 元字符表明想对一个字符集合进行取非匹配。
“^” 的效果将作用于给定字符集和里的所有字符或字符区间，而不是仅限于紧跟在 “^” 字符后面的那一个字符或者字符区间。
使用元字符 元字符大致分为两种：一种是用来匹配文本的，比如（.），另一种是正则表达式中的语法所要求的（比如 [ 和 ] ）
对特殊字符进行转义
元字符是一些在正则表达式里有着特殊含义的字符。因为有着特殊的含义，所以这些字符就无法用来表达它们本身，所以就需要一个转义字符 “\” ，例如 “.” 将匹配到这个字符本身，而不是它的特殊含义。
任何一个元字符都可以通过给它加上一个反斜杠字符（\）作为前缀的方法来转义。
note：配对的元字符 比如 [ 或 ] 不用作元字符时必须转义，否则正则表达式分析器很可能会抛出一个错误。</description>
    </item>
    
    <item>
      <title>GitHub 自定义域名</title>
      <link>https://www.xueyuyao.com/2018/05/29/2018-05-29-githubcustomdomain/</link>
      <pubDate>Tue, 29 May 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/05/29/2018-05-29-githubcustomdomain/</guid>
      <description> GitHub 网站建起来有一周了，GitHub 支持自定义域名，于是就想着买个自己域名作为网站门面
购买域名 通过同事的推荐下，在 namesilo 购买的域名。
在GitHub配置 我是第一次配置，所以想做个总结记录下。
官网手册里写的比较详细，链接 GitHub 官网配置文档。
在 GitHub 配置，需要以下几个步骤：
1.需要在你的 GitHubPages 的根目录下创建 CNAME 文件，里面只写上你的域名，如 xueyuyao.com
2.进入你的 GitHub Pages 里，选择 Settings。 下面有一个 GitHub Pages 的标签里面的 Custom domain 下面写下你的域名 ，如果你配置的是 www 的，域名前要加 www。
3.在 namesilo 里配置
登录 namesilo，在右上角点击 Manage My Domains。
点击右边蓝色的按钮
在框内填写你的对应的信息，最后点击 SUBMIT
提交之后 DNS 配置有延迟，可以通过 nslookup 命令 可以查到 DNS 记录的生存时间还可以指定使用哪个 DNS 服务器进行解释。
通过下面代码测试 DNS 记录配置是否成功。
dig docs.example.com +nostats +nocomments +nocmd  </description>
    </item>
    
    <item>
      <title>调试九法</title>
      <link>https://www.xueyuyao.com/2018/05/28/2018-05-27-debuging/</link>
      <pubDate>Mon, 28 May 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/05/28/2018-05-27-debuging/</guid>
      <description>Debuging 调试在编程工作中很常见，几乎每天都会很它打交道。可以说对于编程人员来说是一件很困扰的事情，有时候查找一个 Bug 原因，需要花费大量的时间和精力。
本书一共总结了调试规则九则：
1.理解系统
2.制造失败
3.不要想，而要看
4.分而治之
5.一次只改一个地方
6.保持审计跟踪
7.检查插头
8.获得全新观点
9.如果你不修复 Bug，它将依然存在
单看这 9 个规则的标题，会有熟悉的感觉吧，会不会跟自己平时调试的时候，有一些方法差不多，觉得很简单。那回想一下，这些简单的规则，是否都能用对地方呢，是否在关键的时候，想的到呢？
其实在实际工作中，有时候越简单的规则往往越被人忽略。有些规则显而易见，会记得运用在特定的问题上，越往往不容易；有时候会被人忽视，有时候会走所谓的捷径，最终所花的时间越久。所以看的过程中，有时候会产生共鸣；有时候会暗自懊悔，自己为什么当时没有使用这种调试方法，所以要记住并运用好这些规则会很有帮助。
读这本书并写下读书笔记，最主要的是想提高自己的调试能力，提高工作效率；当然也能节省下来时间去做其他的事情。 书中每个规则里面都有详细细分了规则使用的不同情况，还有举例说明。我把自己在看书过程中的想法记录一下，加深下对于规则的理解，以便更好的运用到工作生活中去。
理解系统 项目已经到了中后期，基本每天会被分配到不同的 Bug，有时候会接到自己不熟悉的功能 Bug，接到这样的 Bug，首先要做的工作就是理解系统。
理解系统就是你必须掌握系统的工作原理以及它是如何设计的，在某些情况下，还要知道为什么这么设计，如果你没有理解系统的某个部分，那么通常就是出问题的地方。
『昨天我在查找一个 Bug 的原因：我查找到在跟 AI 一起比赛时，对方使用的 Buff 跟显示出来的一致；跟真实的玩家比赛时，对方使用的 Buff 跟显示出来的不一致。我咨询了主程 AI 跟真实玩家的数据上的区别：AI 的 Buff 使用是纯客户端处理，而真实的玩家需要发送给服务端，服务端会再进行计算，再分发给其他玩家的。我断定问题出在服务器那边。最后结果肯定不是服务端的问题，问题出在客户端读取服务端的一个类型 type 上，type 并不是 BuffType 而是需要做一个类型转换，之前直接当做 BuffType 接收的，所以会出现对方使用跟显示不一致的问题。』
上面的事例中我忽略了一个错误，就是没有理解系统，我没有去查看这个功能的数据接口相关的文档说明，导致了判断错误。
在开发的过程中，在接触到新的功能时、修改 Bug，容易犯经验主义错误，没有仔细的看相关文档，导致最后漏掉功能细节，或者修改 Bug 不彻底，甚至找不到出现 Bug 原因。
理解系统可以通过以下几方面来做：
1.阅读手册，手册里会告诉你正确的使用方法；
2.逐字逐句的阅读整个手册，解决问题的方法可能就隐藏在不起眼的角落；
3.知道什么是正常的，即必须掌握你所工作技术领悟内的基础知识，才能知道什么是正常的；
4.知道工作流程：当你尝试查找错误时，必须知道要查找的路线；
5.调试工具是用来观察系统的眼和耳，你必须选择正确的工具，正确地使用工具，并正确地解释得到的结果；你越是精通工具，就越容易查明系统中发生了什么事情；
6.了解你的工具：调试工具是用来观察系统的眼和耳，你必须选择正确的调试工具，正确的使用工具，并正确的解释得到的结果。还要必须了解工具的局限性，可以显示什么错误，不能显示什么错误。还必须了解开发工具，所使用的编程语言；
7.在项目中，对一个组件或者语法的运用有分歧，不要盲目的相信自己的记忆力，不要猜测，去查阅手册，要养成良好的查阅习惯。
制造失败 有时候理解了系统，还是锁定不了 Bug 的来源，这时候就需要执行下一个方案了。
1.制造失败：顾名思义就是把失败再重复一遍，或者几遍。
为什么要制作失败呢？</description>
    </item>
    
    <item>
      <title>图文混排总结</title>
      <link>https://www.xueyuyao.com/2018/05/23/2018-05-23-supertextmesh/</link>
      <pubDate>Wed, 23 May 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/05/23/2018-05-23-supertextmesh/</guid>
      <description>图文混排总结 最近在做图文混排相关的功能，先后使用了几种方式实现；有的本身有问题，有的不适用与我们的项目， 总结一下以后略过这些坑。
TextWithImage Text 中加载个 Image 是没有问题，加载1个以上，就会报错(错误位置是 TextWithImage 里 99 行)，将多余的 Image 的 enable 设置为 false，不能进行设置，删除等操作，还会出现加载一个 Image 创建出 2 个， 加载 2 个，创建出 3 个&amp;hellip;翻倍的创建 Image，消耗性能。
TextInlineSprite 实现原理：（text中插入图片） 1：总体显示方面都还可以 (可以设置 Image 显示大小，支持动态图）
2：显示 Bug（表情会出现丢失的情况，关掉界面再打开就会显示）
3: 需要手动清理画布上的表情 list 显示(如果是分页显示的话，切换表情时，需要把前一个 Image 内同清理掉)
4:最严重的问题时分辨率适配问题(不同比例的分辨率，表情位置会出现偏差，目前没有找到合适的办法解决)， 在网上看的是， 写插件的作者之前设计的时候，没有把适配考虑进去，
5:性能未测试
参考链接：TextInlineSprite
EmojiText 实现原理：（文字和图片独立渲染） 这个方案目前想到有两个弊端：
1：Outline、Shadow 使用时，图片也被处理的问题
2：图片是根据文字大小来渲染的，跟文字大小一样，显示看起来表情没有很突出
参考链接：EmojiText (文字和图片独立渲染)
上面的这些情况是我在项目中遇到的实际问题，以下链接中有详细的
UGUI 图文混排解决方案和优化
Super Text Mesh SuperTextMesh 是个功能很强大的插件，可以实现渲染动态文字，富文本支持图文混排。具体的功能类型有：文字效果、TextColor、Automatic、Master、Inline；（图文混排就是 Inline 的一种实现方式：Quads）还有一个比较好的是，SuperTextMesh 是开源的，根据项目的需求可以修改源代码。
unityAssetStore 下载链接 Super Text Mesh</description>
    </item>
    
    <item>
      <title>学习之路</title>
      <link>https://www.xueyuyao.com/2018/05/23/2018-05-23-learnroads/</link>
      <pubDate>Wed, 23 May 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/05/23/2018-05-23-learnroads/</guid>
      <description>学习之路 讲述了作者自己编程经历，以及写这本书的过程。写一个成功的模式需要历经许多从业者的使用、反馈、不断的修改验证，才能越来越完善。我们目前使用的编程语言、编程模式、以及读到的技术书籍，都是作者反复推敲验证过之后的成果，我们确实是站在许多人的肩膀上。在本书的一开始，作者讲述了在编程道路上，总结了大概学徒期、熟练工、师傅这三种阶段，这三个阶段不能按传统行业那么单纯的定义。处在师傅阶段的时候，在学习新的语言时，也需要经历学徒期、熟练工等等。
在编程道路上，处在不同阶段，或者不同状态下，需要采用不同的学习模式来应对。
第一部分：在学习过程中要持有空杯心态 在学习一门新的语言过程中，需要理解支撑其规则的底层因素及原理。只有了解了原理，才能适应实际使用过程中的各种情况，以不变应万变。 在实际工作中，发现问题时不要回避，寻求解决问题的方法、敢于失败、去尝试不同的解决方法，以找到最合适的解决方案。
持有空杯心态来吸收接触新的知识，领域。与身边的人沟通、交流；在这个过程中不要隐藏自己的无知，相反要正式自己的无知，多向专业的人请教问题。在工作中不要不懂装懂，不要去承诺一项自己根本无法完成的工作，来显示自己的技术能力。要让同事们看到自己的学习能力而不是已经掌握的知识。多去看一些技术厉害的人、收集她们的履历、学习的书籍、找出对自己有用的，总结出一份计划，并付出行动；以解决实际问题来学习新的知识，学习一项技能之后，做一个实际的小项目来验证自己的学习成果；养成定期把自己的履历审查一遍的习惯，整理自己的技能列表。
发现了一项技能，身边的人都了解而自己不了解。这时采取行动去掌握（看相关文献、API，然后做实际的一个小项目）来填补自己的这项技能空白，在此期间不要因为自己的学习影响了公司的工作，也不要发现了技能空白之后，不采取行动去填补它，这样只会让自己更无知。能意识到自己缺少的东西并补充它，就会向前迈进了一步，准确的自我评价，确定了自己走了多远，并记下知识中的空白，要对自己已有的能力，和即将胜任的技能以及长期感兴趣的知识都了然于胸。
如果觉得在目前的职位上如鱼得水了，没有什么挑战性的时候，尝试申请一些具有挑战性的工作，当然也不要冒失的去申请自己根本无法完成的工作，要结合自身的实际情况，这样技能得到提升，又不耽误公司的项目进度。
第二部分：编程之路是漫漫长路 要理解不是所有的人都会在编程之路上一直走下去。有的可能因为各种原因不得已选择其他的职业；有的可能对编程失去兴趣了；有的职位得到的提升，工作过程使用代码很少很少了；所以在学习过程中要明确自己的目的，明确自己要走的路。 如果确定自己要在编程之路上走下去，肯定会遇到许多状况会导致自己的意志不坚定。
1.想要在编程道路上走下去，首先先得保住饭碗，在公司工作要以工作内容为主，技能是简历在牢固的关系之上，是要解决实际问题的，不能太理想化，影响了公司的项目。
2.写下15项能力为你提供的动力的事情，再列出5项最重要的为你提供动力的事情。
3.当现实生活工作扼杀你对软件工艺的激情时，要采取措施来保护并培养自己对软件技艺的激情，做点自己喜欢的事情，从工作中找出一些感兴趣的东西。
4.为自己的职业生涯确定一个合理但又须付出努力的下一步，到达自己的下一步，然后继续制定整个过程计划，直到抵达理想的目标。（过程步骤具体化）
第三部分：准确的自我评估 在学习编程的道路上，要对自己做出准确的评估，其实的不太容易的。你可能知道你学习的起点在哪里，但你不知道学习编程的终点在哪里，尤其是处于学徒期阶段。所以要寻找办法，来帮助自己对自己做出准确的评估。 这时候就寻找优秀的人，跟优秀的团队一起工作，在团队中只求最差，即宁为狮尾、不做狐头。在团队中只求最差，这时候就会重视自己的学习技能的机会，从最后面开始一路追上去，不断找到改善的方法，不断模仿更强的开发者，知道跟同一团队处于同一水平上。跟优秀的程序员一起工作是一种更好的学习方法，能够帮助自己维持更加准确的自我评估。在学习过程中，寻求同道中人，一起学习，或者定期进行沟通交流，并记录自己学习的过程、经历。无论是正面的还是负面的。谦虚是成功学徒过程的基础之一，与自己的志向结合，谦虚能让你集中精力，并保持沿正确的方向前进，没有谦虚你很容易过早地宣告自己学徒期结束，并遗漏一些重要的课程。编程道路是一条漫漫长路，要花点时间好好利用自己的学徒期，要明白不管工作多久自己，还是一个初学者。
第四部分 恒久学习 1.在学习的前期，提高自己学习的能力是关键的一步，尽管有时候知识多的很，必须采取一些方法和技巧来高效的获取，理解、维持并应用新知识，通过多个维度来寻求新的知识和经验。比如:看技术博客、看软件大师都在做什么、看别人问的问题，并尝试回答。
2.在开始写程序时，避免不了会出错，而实际工作中是不允许出错，或者不允许频繁性的出错。为了避免这种错误，在私底下，我们需要对新学的知识进行不断的实践、敢于失败、总结经验。
3.要尝试使用源码，找别人的代码来读一读，看看人家是怎么构建项目的，为什么要这么写，试着重构代码，来理解人家这么写的原因。看代码的过程中遇到了跟自己意见不一样的情况，思考一下，作者是否考虑过你想法，也有可能是作者遗漏的部分。
最好的学习方法是阅读源代码 在软件开发领域做一名会思考的从业者。包括经常反思自己的工作状态。考虑下自己的实践是否过时。对团队中都想当然的事情，多给自己画几个句号。对工作中的出现的问题，多一些观察、思考，从而做出改变。在日志，个人wiki或者博客中为自己的行程做个记录，将自己学到的经验按时间顺序记录，这会给你所指导的那些人提供一点启发。对于我自己而言，是记录自己所学，所做。然后经常是翻看下自己写过的东西，可能会有不同的理解或者需要添加新的修改。在开始学习的时候，就要养成定期分享所学的经验的习惯。形式可以是撰写博客，或者跟你的同道中人一起开展会议，做演讲，或者为正在学习的各类技术技巧编写教程，可能一开始会很难。有时候自我评估会很片面，因为自我评估只能相对于过去拥有的能力，永远缺乏客观性，其他人会很容易歪曲自己对自身能力的判断。这时候就需要建立一些机制，定期收集关于自身绩效的相对客观的外部数据，通过今早，经常而且高效的寻求反馈，至少你可以提高知道自己不行的概率。在工作过程中，失败是不可避免的，迟早会发生在每个人身上，所以要学会失败，设法确定你常常会在哪些情况下失败并试着解决哪些需要改正的方面，这并不是要你沉溺与对过往食物的自悯，也不是一次追求完美的联系。真正的目标是让你对导致失败的模式，条件，习惯和行为有所自知。有了这种自知，你可以做有意识的选择，而且基于对自身能力边界和局限性的了解，采用自定路线模式时能使之趋于理想状态。
读完前四部分，觉得很有必要做一个自我整理，整理自己所学、想学知识，做一个自我评估。系上白色腰带，从学徒期开始，持续动力，重走慢慢长路。
第五部分 安排你的课程 学习了一段时间以后，要学会自己看书，通过别人指导、推荐、整理出一份读书列表。
用他来跟踪你准备要读的书，并记下已经读过的书。每天拿出固定的一个时间段读书，比如通勤路上，晚上回来到睡觉前的一段时间。在此期间，如果跟“找人指导”，跟“同道中人”交流，会事半功倍。在工作中，听到同事们说一些没听过的概念，要暴露自己的无知，向他人请教那些不知道的概念，以及他们的出处，并把他们加入读书清单。在读书过程中，要结合自己的实际情况去整理读书清单，读适合自己的书籍。
对工具的使用 学会深入挖掘一些工具、技术和技艺，对知识的学习达到“知其所以然”的程度，理解其原理，可以解释其原理，也能增强自己的自信心。不要靠巧合编程，需要难以解决的 Bug，愿意从一个系统从上到下层层追踪问题，愿意花时间弄清楚弄够解释这一问题的知识。时间是公平的，你花多少时间，就会收获多少。在这个过程中有一个方法那就是从第一手资料获取信息，比如看源代码、原版API。对于知识的运用，要做到不仅仅会使用，要深入理解表面知识背后隐藏的计算机原理和基础概念，这样在采用的实现中会有权衡和取舍。
未完待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>学习计划</title>
      <link>https://www.xueyuyao.com/2018/05/23/2018-05-23-learningplan/</link>
      <pubDate>Wed, 23 May 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/05/23/2018-05-23-learningplan/</guid>
      <description>学习计划 自己之前看过一些关于学会一门语言，或者学会一个具体开发软件的流程图，其实多数时候效率都不是很高。看完那本《软件开发这路线图》，里面总结了许多不同学习状态下的学习模式。看的过程中，回想了之前那些年工作学习的时候，有点误入歧途的感觉，也不是说不努力，是方法没有用对，再加上懒惰，所以从现在开始回归正途。
第一步 自我整理  总结一下自己接触过的所有的语言、引擎软件、用过的工具插件、看过的书籍、收藏的书籍。 分别整理下对这些内容的掌握程度。 整理出来哪些内容是现在工作需要使用到的。 整理出来哪些是你感兴趣的，还没开始学习的部分。  以上部分将以脑图形式呈现
第二步 具体技能 之前没有养成良好的记录习惯，导致好多东西都在反复的学习；或者是第一遍没有学精通，导致第二次再用到的时候还需要重新看一遍。为了提高学习质量，计划一边学一遍记录总结。学习目前工作需要的技能：目前使用的开发引擎是 Unity，编程语言是 C#；目前这两个的掌握程度会用的阶段，首要任务是把这两大块精通，理解其原理。
1.学习 Unity Manual Unity 引擎版本更新比较快，打算把 UnityManual 看一遍，一边看，一边实际操作。 学习顺序： 2D-&amp;gt;Graphics-&amp;gt;Physics-&amp;gt;Scripting-&amp;gt;Networking-&amp;gt;Audio-&amp;gt;Animation-&amp;gt;Timeline-&amp;gt;UI-&amp;gt;Navigation-&amp;gt;Unity Services-&amp;gt;Virtual Reality-&amp;gt;Platform Specific
注：其中看到 UI 部分的时候，结合着相对应的 UGUI 源码看一遍，然后做总结；看源码的过程中，可以结合着 C# 本质论里面的知识点一块看，然后做相应的总结。
2.渲染与Shader-&amp;gt;AssetBundle-&amp;gt;编辑器扩展 这三个大块知识，打算分别拿出单独的时间段来学习，然后做练习，具体多久看前一部分的学习情况。
Shader 结合着《Unity Shader 入门精要》；
AssetBundle 看原 API 和网上的文章；
编辑器扩展看 API。
这三个都要建立自己的“质脆玩具”。
3.游戏设计模式-&amp;gt;网络通讯-&amp;gt;性能优化 设计模式：目前用的最多的是观察者模式、单例模式、命令模式、状态模式、工厂模式等。现在流行的 23 种模式，其根本还是要遵守设计模式的六大原则。后期学习的时候，通过学习设计模式，来理解其映射出来的设计原则，结合着《游戏编程模式》一块看。
网络通讯：Http、Socket网络通讯。
性能优化：内存（资源内存占用、引擎模块自身内存占用 、托管堆内存占用）；CPU （引擎模块&amp;lt;渲染模块、UI、 模块、 加载模块&amp;gt;，自身代码）；GPU。
第三步 扩展 前两步写的都是跟目前工作联系比较密切的知识内容，这一部分打算再此做一些扩展。
比如学习 Lua 语言，之前专门练习过 Lua 的语言，不过现在有些生疏了；
Java 语言也是接 SDK 的时候，有所接触；</description>
    </item>
    
    <item>
      <title>调试的重要性</title>
      <link>https://www.xueyuyao.com/2018/05/23/2018-05-23-debuging_first/</link>
      <pubDate>Wed, 23 May 2018 22:35:26 +0800</pubDate>
      
      <guid>https://www.xueyuyao.com/2018/05/23/2018-05-23-debuging_first/</guid>
      <description>调试的重要性 掌握调试的技巧与方法，会让调试工作事半功倍，从而节省更多的时间来做其他的事情。个人觉得调试在学习工作中很重要的地位， 把 Debuging 的读书笔记作为我网站的第一篇博客，原因后面会说到。
不要浮于表面 1.不要只看厚度
几句话能把问题讲清楚容易，一句话把问题讲清楚难，更何况有时候几句话还讲不清楚，有时候写书跟说话一样。 &amp;gt;把书写厚了容易，把书写薄了难
曾经以为只有厚的书，知识含量高；往往浓缩的才是精华，以后说话做事力求简洁明了。
2.越简单的规则往往越被人忽略
有些规则显而易见，会记得运用在特定的问题上，越往往不容易；有时候会被人忽视，有时候会走所谓的捷径，最终所花的时间越久，所以要记住并运用好这些规则。
3.调试不仅仅是故障检修
 调试不仅仅是故障检修，故障检修通常是已知设计没有问题的情况下，有硬件出现问题。调试通常是查明一个设计为什么没有按计划工作。
 作者通过 20 多年工作经验总结出来的调试九法，并不是一开始就写了 9 种；而是工作积累总结了无数条，被压缩成了 9 条。</description>
    </item>
    
  </channel>
</rss>